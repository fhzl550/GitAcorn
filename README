깃허브 스터디 프로젝트
1. README 파일 생성
2. Git status : 상태를 활인하는 명령어
->Untracked : 저장소에서 참조하지 않은 파일(New File)
3. Git add README : 해당 파일을 staging Area 영역(index)에 추적하는 명령어
-> Staged new file READM: index에서 해당 파일을 추적하는 중이다
-> nothing to commit, working tree clean : 작업 이력과 저장소 이력이 같다.
4. Git commit -m "" :  index에서 추적하는 내역을 .git(저장소)에 저장하는 명령어
5. README를 수정 후 저장
-> modified : README : 작업 이력과 저장소 이력이 다르다.
6. Git add README : Staged modified : 
7. Git commit -m "README" 저장("README" 수정 후 저장)

**파일생성 후 저장
Untracked -> staged -> unmodified(committed)
**파일 수정 후 저장
modified->stagedmodified->unmodified(committed)

Git init : git 저장소를 생성 (. Git 포함하는 하위 폴더는 모두 저장소에서 관리)
Git diff (파일명). : 작업 내역과 저장소의 이력을 비교해서 보여주는 명령어
Git diff --staged : 추적하는(index)내역과 저장소의 이력을비교해서 보여주는 명령ㅇ어
Git add . , * , [파일명] : 작업내역을 index에서 추적하는 명령어 ( . : 하위폴더와 숨김 폴더 모든 파일,
* : 이전에 추가한적이 있엇던 모든 파일(새로운 파일 제외))
Git commit -m "' : index에 추적하는 내역을 저장소에 저장하는 명령어
Git commit -a -m "": git add * + git commit -m "" : 추적과 저장이 합쳐진 명령어
Git reset HEAD<file> : 추적하는 파일을 추적하지 않는 상태로 변경
.gitignore : 파일을 작성하면 index에서 감시하지 않을 파일이나 폴더를 추가 할 수 있다.
(컴퓨터 설정 파일이나 편집기 설정 파일을 제외한다, git 프로젝트 안에 다른 git프로젝트가 있을때)
git commit --amend   : 컷의 멘트를 변경하고 싶을 때 
Git checkout --. Or <파일명> : 작업내역에 문제가 있을때 마지막에 저장한 내역으로 초기화 하는 명령어(작업 내역 취소)

Git log : 커밋이력을 보는 명령어
Git log -p
Git log --pretty : 
Git log -숫자
Git log --graph : 커밋을 그래프로 보는 것

Branch : 기존의 작업에서 다른 작업을 하고 싶을 때 생성하는 가지 
(Master, main) branch : git init 시 최초로 생성되는 가지로 배포 또는 병합하는 메인 가지다 (절대 삭제하지 않는다.  main은 github에서 권장하는 이름)
Git branch<가지이름> : 새로운 branch를 생성하는 명령어
Git checkout <가지이름> : 해당 가지를 선택해서 작업 하겠다(HEAD를변경)는 명령어
Git checkout -b<가지이름> : 가지를 생성하면 HEAD를 변경하는 명령어
